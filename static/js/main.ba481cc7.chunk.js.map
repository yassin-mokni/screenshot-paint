{"version":3,"sources":["components/Line.js","components/Lines.js","Paint.js","reportWebVitals.js","index.js"],"names":["Line","pathData","line","map","p","get","join","className","d","Lines","lines","index","Paint","paintZone","React","createRef","state","List","isPainting","screenshot","bind","handleMouseUp","handleMouseDown","handleMouseMove","document","addEventListener","this","zone","getElementById","image","crossOrigin","e","canvas","createElement","width","height","getContext","drawImage","pixelData","getImageData","offsetX","offsetY","data","setState","removeEventListener","html2canvas","querySelector","useCORS","then","console","log","toDataURL","body","appendChild","style","display","mouseEvent","button","point","pointCoordinates","prevState","push","updateIn","size","boundingRect","current","getBoundingClientRect","Map","x","clientX","left","y","clientY","top","id","ref","onMouseDown","onMouseMove","onClick","src","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kPAWeA,MAXf,YAAyB,IACfC,EAAW,KADG,EAARC,KAGPC,KAAI,SAAAC,GACH,MAAM,GAAN,OAAUA,EAAEC,IAAI,KAAhB,YAAwBD,EAAEC,IAAI,SAE/BC,KAAK,OAEV,OAAO,sBAAMC,UAAU,OAAOC,EAAGP,KCItBQ,MAVf,YAA2B,IAAVC,EAAS,EAATA,MACb,OACE,qBAAKH,UAAU,WAAf,SACGG,EAAMP,KAAI,SAACD,EAAMS,GAAP,OACT,cAAC,EAAD,CAAkBT,KAAMA,GAAbS,S,uBC0GNC,E,kDAzGX,aAAe,IAAD,8BACV,gBACKC,UAAYC,IAAMC,YACvB,EAAKC,MAAQ,CACTN,MAAO,IAAIO,IACXC,YAAY,GAGhB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBACvB,EAAKG,gBAAkB,EAAKA,gBAAgBH,KAArB,gBAXb,E,qDAcd,WACII,SAASC,iBAAiB,UAAWC,KAAKL,eAE1C,IAAMM,EAAOH,SAASI,eAAe,SAC/BC,EAAQL,SAASI,eAAe,SACtCC,EAAMC,YAAc,YACpBH,EAAKF,iBAAiB,YAAY,SAASM,GACnCL,KAAKM,SACLN,KAAKM,OAASR,SAASS,cAAc,UACrCP,KAAKM,OAAOE,MAAQL,EAAMK,MAC1BR,KAAKM,OAAOG,OAASN,EAAMM,OAC3BT,KAAKM,OAAOI,WAAW,MAAMC,UAAUR,EAAO,EAAG,EAAGA,EAAMK,MAAOL,EAAMM,SAE3E,IAAIG,EAAYZ,KAAKM,OAAOI,WAAW,MAAMG,aAAaR,EAAES,QAAST,EAAEU,QAAS,EAAG,GAAGC,KACrE,GAAdJ,EAAU,IAAqB,GAAdA,EAAU,IAAqB,GAAdA,EAAU,IAAqB,KAAdA,EAAU,IAC5DZ,KAAKiB,SAAS,CAAEzB,YAAY,KAElCE,KAAKM,S,kCAKX,WACIF,SAASoB,oBAAoB,UAAWlB,KAAKL,iB,wBAGjD,WACIwB,IAAYrB,SAASsB,cAAc,UAAW,CAC1CC,SAAS,IACVC,MAAK,SAAAhB,GACJiB,QAAQC,IAAIlB,EAAOmB,aACnB3B,SAAS4B,KAAKC,YAAYrB,GAC1BR,SAASI,eAAe,QAAQ0B,MAAMC,QAAQ,a,2BAItD,WACI7B,KAAKiB,SAAS,CAAEzB,YAAY,M,6BAGhC,SAAgBsC,GACZ,GAA0B,IAAtBA,EAAWC,OAAf,CAIA,IAAMC,EAAQhC,KAAKiC,iBAAiBH,GAEpC9B,KAAKiB,UAAS,SAAAiB,GAAS,MAAK,CACxBlD,MAAOkD,EAAUlD,MAAMmD,KAAK,IAAI5C,IAAK,CAACyC,KACtCxC,YAAY,S,6BAIpB,SAAgBsC,GACZ,GAAK9B,KAAKV,MAAME,WAAhB,CAGA,IAAMwC,EAAQhC,KAAKiC,iBAAiBH,GACpC9B,KAAKiB,UAAS,SAAAiB,GAAS,MAAK,CACxBlD,MAAOkD,EAAUlD,MAAMoD,SAAS,CAACF,EAAUlD,MAAMqD,KAAO,IAAI,SAAA7D,GAAI,OAAIA,EAAK2D,KAAKH,a,8BAItF,SAAiBF,GACb,IAAMQ,EAAetC,KAAKb,UAAUoD,QAAQC,wBAC5C,OAAO,IAAIC,IAAI,CACXC,EAAGZ,EAAWa,QAAUL,EAAaM,KACrCC,EAAGf,EAAWgB,QAAUR,EAAaS,Q,oBAI7C,WACI,OACI,sBACIC,GAAG,QACHnE,UAAU,YACVoE,IAAKjD,KAAKb,UACV+D,YAAalD,KAAKJ,gBAClBuD,YAAanD,KAAKH,gBALtB,UAOI,cAAC,EAAD,CAAOb,MAAOgB,KAAKV,MAAMN,QACzB,wBAAQH,UAAU,SAASuE,QAASpD,KAAKP,WAAzC,wBACA,mBAAGuD,GAAG,OAAOpB,MAAO,CAAC,QAAU,QAA/B,kEACA,qBAAKoB,GAAG,QAAQK,IAAI,2DAA2DzB,MAAO,CAAC,WAAa,mB,GAnGhGxC,IAAMkE,WCOXC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnE,SAASI,eAAe,SAM1BqD,M","file":"static/js/main.ba481cc7.chunk.js","sourcesContent":["function Line({ line }) {\n    const pathData = \"M \" +\n      line\n        .map(p => {\n          return `${p.get('x')} ${p.get('y')}`;\n        })\n        .join(\" L \");\n  \n    return <path className=\"path\" d={pathData} />;\n  }\n  \nexport default Line;\n","import Line from \"./Line\";\n\nfunction Lines({ lines }) {\n    return (\n      <svg className=\"painting\" >\n        {lines.map((line, index) => (\n          <Line key={index} line={line} />\n        ))}\n      </svg>\n    );\n}\n  \nexport default Lines;\n","import React from 'react';\nimport Lines from \"./components/Lines\";\nimport {Map, List} from 'immutable';\nimport html2canvas from 'html2canvas';\n\nclass Paint extends React.Component {\n\n    constructor() {\n        super();\n        this.paintZone = React.createRef();\n        this.state = {\n            lines: new List(),\n            isPainting: false,\n        };\n\n        this.screenshot = this.screenshot.bind(this);\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"mouseup\", this.handleMouseUp);\n\n        const zone = document.getElementById('paint');\n        const image = document.getElementById('image');\n        image.crossOrigin = \"Anonymous\";\n        zone.addEventListener('mousemove',function(e) {\n            if(!this.canvas) {\n                this.canvas = document.createElement('canvas');\n                this.canvas.width = image.width;\n                this.canvas.height = image.height;\n                this.canvas.getContext('2d').drawImage(image, 0, 0, image.width, image.height);\n            }\n            var pixelData = this.canvas.getContext('2d').getImageData(e.offsetX, e.offsetY, 1, 1).data;\n            if(pixelData[0]==0&&pixelData[1]==0&&pixelData[2]==0&&pixelData[3]==255) {\n                this.setState({ isPainting: false });\n            }\n        }.bind(this));\n    \n\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    }\n\n    screenshot() {\n        html2canvas(document.querySelector(\"#paint\"), {\n            useCORS: true\n        }).then(canvas => {\n            console.log(canvas.toDataURL())\n            document.body.appendChild(canvas)\n            document.getElementById(\"hint\").style.display=\"block\";\n        });\n    }\n\n    handleMouseUp() {\n        this.setState({ isPainting: false });\n    }\n\n    handleMouseDown(mouseEvent) {\n        if (mouseEvent.button !== 0) {\n            return;\n        }\n\n        const point = this.pointCoordinates(mouseEvent);\n\n        this.setState(prevState => ({\n            lines: prevState.lines.push(new List([point])),\n            isPainting: true\n        }));\n    }\n\n    handleMouseMove(mouseEvent) {\n        if (!this.state.isPainting) {\n            return;\n        }\n        const point = this.pointCoordinates(mouseEvent);\n        this.setState(prevState => ({\n            lines: prevState.lines.updateIn([prevState.lines.size - 1], line => line.push(point))\n        }));\n    }\n\n    pointCoordinates(mouseEvent) {\n        const boundingRect = this.paintZone.current.getBoundingClientRect();\n        return new Map({\n            x: mouseEvent.clientX - boundingRect.left,\n            y: mouseEvent.clientY - boundingRect.top,\n        });\n    }\n\n    render() {\n        return (\n            <div\n                id=\"paint\"\n                className=\"paintZone\"\n                ref={this.paintZone}\n                onMouseDown={this.handleMouseDown}\n                onMouseMove={this.handleMouseMove}\n            >\n                <Lines lines={this.state.lines} />\n                <button className=\"button\" onClick={this.screenshot}>Screenshot</button>\n                <p id=\"hint\" style={{\"display\":\"none\"}} >Check the console to get the base64 encoded data URL</p>\n                <img id=\"image\" src=\"https://yassine-mokni.github.io/screenshot-paint/mug.png\" style={{\"visibility\":\"hidden\"}}/>\n            </div>\n        );\n    }\n\n\n}\n\nexport default Paint;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Paint from './Paint';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Paint />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}