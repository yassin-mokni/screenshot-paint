{"version":3,"sources":["components/Line.js","components/Lines.js","Paint.js","reportWebVitals.js","index.js"],"names":["Line","pathData","line","map","p","get","join","className","d","Lines","lines","index","Paint","paintZone","React","createRef","state","List","isPainting","screenshot","bind","handleMouseUp","handleMouseDown","handleMouseMove","document","addEventListener","this","removeEventListener","html2canvas","querySelector","useCORS","then","canvas","console","log","toDataURL","body","appendChild","setState","mouseEvent","button","point","pointCoordinates","prevState","push","updateIn","size","boundingRect","current","getBoundingClientRect","Map","x","clientX","left","y","clientY","top","id","ref","onMouseDown","onMouseMove","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kPAWeA,MAXf,YAAyB,IACfC,EAAW,KADG,EAARC,KAGPC,KAAI,SAAAC,GACH,MAAM,GAAN,OAAUA,EAAEC,IAAI,KAAhB,YAAwBD,EAAEC,IAAI,SAE/BC,KAAK,OAEV,OAAO,sBAAMC,UAAU,OAAOC,EAAGP,KCItBQ,MAVf,YAA2B,IAAVC,EAAS,EAATA,MACb,OACE,qBAAKH,UAAU,WAAf,SACGG,EAAMP,KAAI,SAACD,EAAMS,GAAP,OACT,cAAC,EAAD,CAAkBT,KAAMA,GAAbS,S,uBCuFNC,E,kDAtFX,aAAe,IAAD,8BACV,gBACKC,UAAYC,IAAMC,YACvB,EAAKC,MAAQ,CACTN,MAAO,IAAIO,IACXC,YAAY,GAGhB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBACvB,EAAKG,gBAAkB,EAAKA,gBAAgBH,KAArB,gBAXb,E,qDAcd,WACII,SAASC,iBAAiB,UAAWC,KAAKL,iB,kCAG9C,WACIG,SAASG,oBAAoB,UAAWD,KAAKL,iB,wBAGjD,WACIO,IAAYJ,SAASK,cAAc,UAAW,CAC1CC,SAAS,IACVC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAOG,aACnBX,SAASY,KAAKC,YAAYL,Q,2BAIlC,WACIN,KAAKY,SAAS,CAAEpB,YAAY,M,6BAGhC,SAAgBqB,GACZ,GAA0B,IAAtBA,EAAWC,OAAf,CAIA,IAAMC,EAAQf,KAAKgB,iBAAiBH,GAEpCb,KAAKY,UAAS,SAAAK,GAAS,MAAK,CACxBjC,MAAOiC,EAAUjC,MAAMkC,KAAK,IAAI3B,IAAK,CAACwB,KACtCvB,YAAY,S,6BAIpB,SAAgBqB,GACZ,GAAKb,KAAKV,MAAME,WAAhB,CAIA,IAAMuB,EAAQf,KAAKgB,iBAAiBH,GAEpCb,KAAKY,UAAS,SAAAK,GAAS,MAAK,CACxBjC,MAAOiC,EAAUjC,MAAMmC,SAAS,CAACF,EAAUjC,MAAMoC,KAAO,IAAI,SAAA5C,GAAI,OAAIA,EAAK0C,KAAKH,a,8BAItF,SAAiBF,GACb,IAAMQ,EAAerB,KAAKb,UAAUmC,QAAQC,wBAC5C,OAAO,IAAIC,IAAI,CACXC,EAAGZ,EAAWa,QAAUL,EAAaM,KACrCC,EAAGf,EAAWgB,QAAUR,EAAaS,Q,oBAI7C,WACI,OACI,sBACIC,GAAG,QACHlD,UAAU,YACVmD,IAAKhC,KAAKb,UACV8C,YAAajC,KAAKJ,gBAClBsC,YAAalC,KAAKH,gBALtB,UAOI,cAAC,EAAD,CAAOb,MAAOgB,KAAKV,MAAMN,QACzB,wBAAQH,UAAU,SAASsD,QAASnC,KAAKP,WAAzC,+B,GAhFIL,IAAMgD,WCOXC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjD,SAASkD,eAAe,SAM1BX,M","file":"static/js/main.969bb939.chunk.js","sourcesContent":["function Line({ line }) {\n    const pathData = \"M \" +\n      line\n        .map(p => {\n          return `${p.get('x')} ${p.get('y')}`;\n        })\n        .join(\" L \");\n  \n    return <path className=\"path\" d={pathData} />;\n  }\n  \nexport default Line;\n","import Line from \"./Line\";\n\nfunction Lines({ lines }) {\n    return (\n      <svg className=\"painting\" >\n        {lines.map((line, index) => (\n          <Line key={index} line={line} />\n        ))}\n      </svg>\n    );\n}\n  \nexport default Lines;\n","import React from 'react';\nimport Lines from \"./components/Lines\";\nimport {Map, List} from 'immutable';\nimport html2canvas from 'html2canvas';\n\nclass Paint extends React.Component {\n\n    constructor() {\n        super();\n        this.paintZone = React.createRef();\n        this.state = {\n            lines: new List(),\n            isPainting: false\n        };\n\n        this.screenshot = this.screenshot.bind(this);\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"mouseup\", this.handleMouseUp);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    }\n\n    screenshot() {\n        html2canvas(document.querySelector(\"#paint\"), {\n            useCORS: true\n        }).then(canvas => {\n            console.log(canvas.toDataURL())\n            document.body.appendChild(canvas)\n        });\n    }\n\n    handleMouseUp() {\n        this.setState({ isPainting: false });\n    }\n\n    handleMouseDown(mouseEvent) {\n        if (mouseEvent.button !== 0) {\n            return;\n        }\n\n        const point = this.pointCoordinates(mouseEvent);\n\n        this.setState(prevState => ({\n            lines: prevState.lines.push(new List([point])),\n            isPainting: true\n        }));\n    }\n\n    handleMouseMove(mouseEvent) {\n        if (!this.state.isPainting) {\n            return;\n        }\n\n        const point = this.pointCoordinates(mouseEvent);\n\n        this.setState(prevState => ({\n            lines: prevState.lines.updateIn([prevState.lines.size - 1], line => line.push(point))\n        }));\n    }\n\n    pointCoordinates(mouseEvent) {\n        const boundingRect = this.paintZone.current.getBoundingClientRect();\n        return new Map({\n            x: mouseEvent.clientX - boundingRect.left,\n            y: mouseEvent.clientY - boundingRect.top,\n        });\n    }\n\n    render() {\n        return (\n            <div\n                id=\"paint\"\n                className=\"paintZone\"\n                ref={this.paintZone}\n                onMouseDown={this.handleMouseDown}\n                onMouseMove={this.handleMouseMove}\n            >\n                <Lines lines={this.state.lines} />\n                <button className=\"button\" onClick={this.screenshot}>Screenshot</button>\n            </div>\n        );\n    }\n\n\n}\n\nexport default Paint;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Paint from './Paint';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Paint />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}